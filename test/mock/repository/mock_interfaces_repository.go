// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/interfaces/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/interfaces/interfaces.go -destination=./test/mock/repository/mock_interfaces_repository.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	context "context"
	entity "go-belajar-mock/internal/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIGoMockTestRepository is a mock of IGoMockTestRepository interface.
type MockIGoMockTestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGoMockTestRepositoryMockRecorder
}

// MockIGoMockTestRepositoryMockRecorder is the mock recorder for MockIGoMockTestRepository.
type MockIGoMockTestRepositoryMockRecorder struct {
	mock *MockIGoMockTestRepository
}

// NewMockIGoMockTestRepository creates a new mock instance.
func NewMockIGoMockTestRepository(ctrl *gomock.Controller) *MockIGoMockTestRepository {
	mock := &MockIGoMockTestRepository{ctrl: ctrl}
	mock.recorder = &MockIGoMockTestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGoMockTestRepository) EXPECT() *MockIGoMockTestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIGoMockTestRepository) Create(ctx context.Context, tx *gorm.DB, input *entity.GoMocktest) (*entity.GoMocktest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, input)
	ret0, _ := ret[0].(*entity.GoMocktest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIGoMockTestRepositoryMockRecorder) Create(ctx, tx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIGoMockTestRepository)(nil).Create), ctx, tx, input)
}

// GetAll mocks base method.
func (m *MockIGoMockTestRepository) GetAll(ctx context.Context) ([]entity.GoMocktest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.GoMocktest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIGoMockTestRepositoryMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIGoMockTestRepository)(nil).GetAll), ctx)
}

// GetByID mocks base method.
func (m *MockIGoMockTestRepository) GetByID(ctx context.Context, id int) (*entity.GoMocktest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.GoMocktest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIGoMockTestRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIGoMockTestRepository)(nil).GetByID), ctx, id)
}
